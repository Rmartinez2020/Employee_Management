{"version":3,"sources":["components/Container/index.js","components/Jumbotron/index.js","components/SearchForm/index.js","components/Table/index.js","utils/API.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","Jumbotron","SearchForm","htmlFor","name","type","id","placeholder","onChange","handleInputChange","Table","scope","dataid","dataorder","onClick","handleClick","axios","get","Main","state","employees","filtered","search","getEmployees","API","then","res","setState","data","results","catch","err","console","log","e","a","value","target","filteredEmployees","filter","employee","first","toLowerCase","includes","compareValues","key","order","b","hasOwnProperty","varA","toUpperCase","varB","comparison","getAttribute","sortedEmployees","sort","this","map","i","alt","src","picture","medium","last","email","dob","age","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e7c69190.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className=\"container-fluid\">{props.children}</div>;\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\nimport Container from \"../Container\";\r\n\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid text-center\">\r\n            <Container>\r\n            {props.children}\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group\">\r\n            <label htmlFor=\"search\">Search {props.name}</label>\r\n            <br/>\r\n            <input type=\"search\" id=\"search\" placeholder={\"Search by \"+props.type} onChange={props.handleInputChange}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\n\r\n\r\nfunction Table (props) {\r\n    return (\r\n        <table className=\"table table-dark\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\"></th>\r\n      <th scope=\"col\">First <i dataid=\"first\" dataorder=\"desc\" className=\"fas fa-angle-down\" onClick={props.handleClick}></i> <i dataid=\"first\" dataorder=\"asc\"className=\"fas fa-angle-up\" onClick={props.handleClick}></i> </th>\r\n      <th scope=\"col\">Last  <i dataid=\"last\" dataorder=\"desc\" className=\"fas fa-angle-down\" onClick={props.handleClick}></i> <i dataid=\"last\" dataorder=\"asc\" className=\"fas fa-angle-up\" onClick={props.handleClick}></i> </th>\r\n      <th scope=\"col\">Email</th>\r\n      <th scope=\"col\">Age</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {props.children}\r\n  </tbody>\r\n</table>\r\n    )\r\n}\r\n\r\nexport default Table;","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=50\"\r\n\r\n\r\nexport default {\r\n  search: function() {\r\n    return axios.get(BASEURL);\r\n  }\r\n};","import React from \"react\";\r\nimport Container from \"../Container\";\r\nimport Jumbotron from \"../Jumbotron\";\r\nimport SearchForm from \"../SearchForm\";\r\nimport Table from \"../Table\";\r\nimport API from \"../../utils/API\"\r\n\r\nclass Main extends React.Component {\r\n    state = {\r\n        employees: [],\r\n        filtered: [],\r\n        search: \"\"\r\n    };\r\n    componentDidMount() {\r\n        this.getEmployees();\r\n    }\r\n    getEmployees = () => {\r\n        API.search()\r\n            .then(res => {\r\n                this.setState({ employees: res.data.results })\r\n                // console.log(res.data.results)\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n    handleInputChange = async (e) => {\r\n        const value = e.target.value;\r\n        await this.setState({ search: value });\r\n        let filteredEmployees = this.state.employees.filter(employee => employee.name.first.toLowerCase().includes(this.state.search.toLowerCase()));\r\n        this.setState({ filtered: filteredEmployees })\r\n    }\r\n    compareValues = (key, order = 'asc') => {\r\n        return function innerSort(a, b) {\r\n            if (!a.name.hasOwnProperty(key) || !b.name.hasOwnProperty(key)) {\r\n                // property doesn't exist on either object\r\n                return 0;\r\n            }\r\n\r\n            const varA = (typeof a[key] === 'string')\r\n                ? a.name[key].toUpperCase() : a.name[key];\r\n            const varB = (typeof b[key] === 'string')\r\n                ? b.name[key].toUpperCase() : b.name[key];\r\n\r\n            let comparison = 0;\r\n            if (varA > varB) {\r\n                comparison = 1;\r\n            } else if (varA < varB) {\r\n                comparison = -1;\r\n            }\r\n            return (\r\n                (order === 'desc') ? (comparison * -1) : comparison\r\n            );\r\n        };\r\n    }\r\n    handleClick = async (e) => {\r\n        const order = e.target.getAttribute(\"dataorder\")\r\n        const value = e.target.getAttribute(\"dataid\")\r\n        let sortedEmployees = this.state.employees.sort(this.compareValues(value, order))\r\n        await this.setState({employees: sortedEmployees});\r\n        console.log(this.state.employees)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Jumbotron>\r\n                    <h1> Employee Management</h1>\r\n                    <SearchForm name=\"Employees\" type=\"Name\" handleInputChange={this.handleInputChange} />\r\n                </Jumbotron>\r\n                <Table handleClick={this.handleClick}>\r\n                    {this.state.search === \"\" ? this.state.employees.map((employee, i) => (\r\n                        <tr key={i}>\r\n                            <th scope=\"row\"><img alt=\"Employee Pic\" src={employee.picture.medium} /></th>\r\n                            <td>{employee.name.first}</td>\r\n                            <td>{employee.name.last}</td>\r\n                            <td>{employee.email}</td>\r\n                            <td>{employee.dob.age}</td>\r\n                        </tr>\r\n                    ))\r\n                        :\r\n                        this.state.filtered.map((employee, i) => (\r\n                            <tr key={i}>\r\n                                <th scope=\"row\"><img alt=\"Employee Pic\" src={employee.picture.medium} /></th>\r\n                                <td>{employee.name.first}</td>\r\n                                <td>{employee.name.last}</td>\r\n                                <td>{employee.email}</td>\r\n                                <td>{employee.dob.age}</td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </Table>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Main from \"./components/Main\"\n\nfunction App() {\n  return <Main />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}